<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="kikyoulzg.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="kikyoulzg.github.io/" rel="alternate" type="text/html" /><updated>2022-02-06T16:28:55+08:00</updated><id>kikyoulzg.github.io/feed.xml</id><title type="html">凌子的部落格</title><entry><title type="html">开源践行者的枷锁</title><link href="kikyoulzg.github.io/2022/01/31/%E5%BC%80%E6%BA%90%E8%B7%B5%E8%A1%8C%E8%80%85%E7%9A%84%E6%9E%B7%E9%94%81.html" rel="alternate" type="text/html" title="开源践行者的枷锁" /><published>2022-01-31T17:29:20+08:00</published><updated>2022-01-31T17:29:20+08:00</updated><id>kikyoulzg.github.io/2022/01/31/%E5%BC%80%E6%BA%90%E8%B7%B5%E8%A1%8C%E8%80%85%E7%9A%84%E6%9E%B7%E9%94%81</id><content type="html" xml:base="kikyoulzg.github.io/2022/01/31/%E5%BC%80%E6%BA%90%E8%B7%B5%E8%A1%8C%E8%80%85%E7%9A%84%E6%9E%B7%E9%94%81.html">&lt;h2 id=&quot;前沿案例&quot;&gt;前沿案例&lt;/h2&gt;
&lt;p&gt;2017年6月的一天,软件工程师许雪里被网友告知他的开源软件XXL-JOB被某知名公司申请了国家发明专利,随后他在国家知识产权局的网站上找到了申请号为“CN201610843823.X”的专利，并确认了这个专利的内容和XXL-JOB是一致的。开源软件居然可以被申请国家专利，这在他看来简直就像是天方夜谭。&lt;/p&gt;

&lt;h2 id=&quot;开源是一种自由的信仰不是免费&quot;&gt;开源是一种自由的信仰，不是免费&lt;/h2&gt;
&lt;p&gt;为什么XXL-JOB的开发者会认为开源软件被申请专利是匪夷所思的事情呢？其实任何一个稍微了解“开源”的人都会有类似的感受。&lt;/p&gt;

&lt;p&gt;主流的观点认为我们今天说的开源运动是脱胎于美国20世纪中叶以后的黑客文酝酿出的自由软件运动。其倡导软件的开发者向公众开放他们的源代码，并确保任何人都可以合法地复制、分发和修改这些源代码。也就是说开源软件对其用户来说是自由的，你不必为获得或使用它而向任何人付费。当然，如果作者为此提供了额外的服务（比如为开源软件的商业版增加的功能和服务），你要为额外的商业服务付费那是合情合理的。&lt;/p&gt;

&lt;h2 id=&quot;可耻的摘桃贼&quot;&gt;可耻的“摘桃贼”&lt;/h2&gt;
&lt;p&gt;但是，如果有人拿着一个开源软件（包括原本开源的部分和修改后的部分）去申请专利，并且通过的话，那么，根据专利法，专利权人享有对这个“开源软件”的专有权。如此一来，其他人如果未经授权对这个“开源软件”复制、分发和修改都是违法的。&lt;/p&gt;

&lt;p&gt;这种摘桃子的行为，无论在国内还是国外都并不罕见，被摘桃子的开源软件开发者往往没有精力维权，也难以接受高昂的诉讼费。就像许雪里的案例，在开源社区的帮助下他向国家知识产权局提起了申诉，但是我们在知识产权局的网站上可以看到这个专利申请在2017年6月23日就进入实质审查阶段，而直到2021年5月14日才被驳回，尽管从结果来看是正义得以伸张，但是这中间历经4年，期间作者与开源社区付出了多少精力我们恐怕难以想象。而且，这个XXL-JOB的软件在github（知名代码托管平台）上可是多达2W+的点赞（star）和8k+复刻（fork）的高人气项目，如果是一般的项目，恐怕更难维权了。&lt;/p&gt;

&lt;h2 id=&quot;开源践行者的先锋&quot;&gt;开源践行者的先锋&lt;/h2&gt;
&lt;p&gt;开源事业要发展，一定离不开它背后那些为之冲锋陷阵的斗士。&lt;/p&gt;

&lt;p&gt;国外的话，比较出名的组织是FSF（自由软件基金会）、OSI（开放源代码促进会），比较为人熟知的个人则有Richard Matthew Stallman（理查德·马修·斯托曼）、Eric Steven Raymond（埃里克·史蒂文·雷蒙德）。&lt;/p&gt;

&lt;p&gt;国内在开源这方面起步较晚，这方面的组织和知名人士较少，但是随着IT行业的迅猛发展和开源软件在各个领域的影响力与日俱增，也有不少企业和爱好者投身其中。比较出名的社区有开源中国、linux中国。&lt;/p&gt;

&lt;h2 id=&quot;开源践行者的枷锁&quot;&gt;开源践行者的枷锁&lt;/h2&gt;
&lt;p&gt;很多事情，光是说说，可能很容易，但是真要做点什么的时候，就不是这么回事了。我们能看到国内很多开源软件的作者完全是利用自己的业余时间来维护项目的。因为开源软件往往无法为他们带来合理的回报，所以他们为了养活自己和家人，只能给企业工作。我认为开源软件开发者不是不切实际的理想主义者，而是兴趣使然的爱好者、忠于技术的极客，最重要的，是平凡的践行者。&lt;/p&gt;

&lt;h2 id=&quot;解开枷锁的钥匙&quot;&gt;解开枷锁的钥匙&lt;/h2&gt;
&lt;p&gt;无论是上文提到的XXL-JOB事件，还是轰动开源界的wine ARM实现被中国公司申请专利的事件，无疑都是对开源软件开发者和开源社区的极大伤害。这种伤害是不是没有办法预防？有没有办法对那些“窃取”开源果实的企业予以反击？从我对好些案例的观察来看，是可以的，前提是你的开源软件要采用适当的“开源许可协议”。&lt;/p&gt;

&lt;p&gt;开源许可协议实质是权利人将其复制权、发行权、修改权等附条件地许可给不特定公众的著作权许可使用合同。比较著名的协议有Mozilla公共许可协议、GPL许可协议和BSD许可协议等。如果你不知到自己应该选择哪种开源协议，假如你使用码云这个托管平台，当你创建一个项目的时候，它有一个很棒的工具协助你选择合适的开源协议。&lt;/p&gt;

&lt;p&gt;但是，这些国外的开源协议，在我国的司法实践中是否有效呢？&lt;/p&gt;

&lt;p&gt;其实近些年，我国的司法实践中也有好些涉及开源许可协议的案件，其中比较为人知晓的是数字天堂和两柚子的计算机软件著作权纠纷案，感兴趣的朋友可以了解一下。&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;但愿自由与正义得以伸张！但愿努力的人天天加鸡腿！&lt;/p&gt;</content><author><name></name></author><summary type="html">前沿案例 2017年6月的一天,软件工程师许雪里被网友告知他的开源软件XXL-JOB被某知名公司申请了国家发明专利,随后他在国家知识产权局的网站上找到了申请号为“CN201610843823.X”的专利，并确认了这个专利的内容和XXL-JOB是一致的。开源软件居然可以被申请国家专利，这在他看来简直就像是天方夜谭。</summary></entry><entry><title type="html">iQoo Neo5 SE和iQoo Neo5横评：Neo5家族双雄</title><link href="kikyoulzg.github.io/2022/01/18/LCD%E5%B1%8F%E5%B9%95%E6%89%8B%E6%9C%BAiQoo-Neo5-SE-%E7%AE%80%E8%AF%84).html" rel="alternate" type="text/html" title="iQoo Neo5 SE和iQoo Neo5横评：Neo5家族双雄" /><published>2022-01-18T15:29:41+08:00</published><updated>2022-01-18T15:29:41+08:00</updated><id>kikyoulzg.github.io/2022/01/18/LCD%E5%B1%8F%E5%B9%95%E6%89%8B%E6%9C%BAiQoo%20Neo5%20SE(%E7%AE%80%E8%AF%84)</id><content type="html" xml:base="kikyoulzg.github.io/2022/01/18/LCD%E5%B1%8F%E5%B9%95%E6%89%8B%E6%9C%BAiQoo-Neo5-SE-%E7%AE%80%E8%AF%84).html">&lt;p&gt;&lt;strong&gt;iQoo在2021年第一季度发布了Neo系列的旗舰手机iQoo Neo5，从销量和用户的评价来看，这都是一款战斗力很高的机型。而它的派生机型，第四季度最后一个月发布的iQoo Neo 5 SE（special edition），在我看来则是Neo5家族中漂亮的收官之作。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;iqoo-neo5-se-和-iqoo-neo5-参数对比8256版&quot;&gt;iQoo Neo5 SE 和 iQoo Neo5 参数对比(8+256版)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/downloads/参数.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;iqoo-neo5-se的亮点与取舍&quot;&gt;iQoo Neo5 SE的亮点与取舍&lt;/h2&gt;
&lt;p&gt;首先，从性能上看,和Neo5采用相同的CPU和存储,这就意味着它的性能方面是同样优秀的，看重硬件性能的用户也大可放心。&lt;/p&gt;

&lt;p&gt;两者的区别主要是在屏幕上，如果你和我一样不喜欢OLED（这里有个小插曲：笔者不久前买了Neo5，但是上手后发现那块AMOLED屏幕有发绿的现象，并且即便是打开了防闪屏，依旧看得眼睛不太舒服。），那么使用LCD屏幕面板的Neo5 SE也许更适合你。在这个使用LCD屏幕的手机越来越少的时代，或许在这个配置和价格上，我们没有太多选择了。&lt;/p&gt;

&lt;p&gt;而正是采用了LCD屏，Neo5 SE无法使用屏幕指纹识别，取而代之的是把指纹识别集成到了侧面的电源键上，这两种指纹解锁方式各有优劣，建议到实体店自己试试。&lt;/p&gt;

&lt;p&gt;当然，作为一款2k-3k价位的手机，在配置上较之旗舰机肯定是有所取舍的，Neo5如此，Neo5 SE也不例外，不过两者取舍的地方有所不同。除了屏幕这个最显著的区别以外，Neo5 SE增加了Neo5没有的极为先进的3.5mm耳机孔，但是，它却舍弃了Neo5上的NFC。此外，Neo5 SE的摄影系统是做了减法的，就拿主摄来说，它没有采用iQOO Neo5的主摄上那颗iQOO与索尼联合定制的IMX598传感器，而是使用了三星的S5KJN1传感器。前者的有效分辨率是48MP，底的规格是1/2英寸。后者的有效分辨率是50MP，底的规格是1/2.76英寸。按照摄影圈“底大一级压死人”这句名言，也就不难理解为何Neo5的拍照广受好评，而SE却被调侃只能扫码了。另外，从机身的握持手感上来说，Neo5 SE的磨砂塑料背板还是逊色于Neo5的玻璃背板的。&lt;/p&gt;

&lt;h2 id=&quot;聊聊origin-os-ocean&quot;&gt;聊聊origin os ocean&lt;/h2&gt;
&lt;p&gt;Neo5 SE搭载了iQoo最新的操作系统,这个被冠以”起源”之名的os,从某种意义上决定了这台手机的灵魂。和Neo5搭载的v1对比，ocean这一代有着一个显著的不同，那就是取消了变形器切换回经典的UI这个设置，也就是说，回不去了。笔者此前长期使用MIUI，也是第一次用vivo/iQoo的手机，所以origin os的UI还是给我带来了一些有趣的体验。&lt;/p&gt;
&lt;h3 id=&quot;变形器控制台交互池&quot;&gt;变形器、控制台、交互池&lt;/h3&gt;
&lt;p&gt;在我看来，这套UI最出彩的地方在于它把一些用户过去需要打开“系统设置”中寻找一番才能调校的重要参数加以分类，并以变形器、控制台、交互池的方式以灵动直观的方式呈现给用户。变形器可以设置视窗风格、图标风格、甚至圆角大小等视觉上的参数，同时提供了三套系统默认主题：经典、Ocean和Pink！。控制台也挺有意思，你可以很方便地调整动画模式、性能模式和屏幕刷新率等。至于这个交互池，有点类似pc上的热区设置（假如你用过deepin操作系统V15以前的版本，你可能会深有体会），你可以在这个地方设置各种边缘手势触发的行为，比如在屏幕右下角左滑可以打开原子随身听。&lt;/p&gt;

&lt;h3 id=&quot;原子应用和组件&quot;&gt;原子应用和组件&lt;/h3&gt;
&lt;p&gt;提到这个原子随身听，就得说说origin os的另一个概念——“原子”，这个概念衍生出了原子应用/组件。在我看来，这些原子应用有一个共同点，那就是不可卸载(说笑)。这里说说我觉得比较有意思的两个原子应用/组件。首先是原子随身，我认为这是一个很好用的桌面组件，除了最基础暂停和切歌以外，通过点击小组件的左下角可以切换不同的音乐App，比如本地、酷狗音乐和网易云音乐。不仅如此，在锁屏界面也整合了原子随身听，无需进入桌面就可以播放喜欢的歌曲。不得不说vivo/iQoo的产品在”音乐”这方面一点也不马虎,或许这和它的历史不无关系。另一个让我眼前一亮的则是原子隐私系统。如果你是首次使用，可以在设置里打开它，以后你便可以通过左滑桌面的dock栏并通过指纹或密码进入。接着，你可以把应用、视频和图片等移入里面，你在里头打开的应用和文件是不会在主系统留下痕迹的，同时你可以打开或关闭定位、麦克风和摄像头等，而这一切也不会影响到主系统。反正这东西就挺nice，毕竟现在国人也都开始注意隐私了。&lt;/p&gt;

&lt;h3 id=&quot;华容道桌面&quot;&gt;华容道桌面&lt;/h3&gt;
&lt;p&gt;不知道大家有没有用过微软的wp系统，我认为origin os的这个华容道的设计应该又从wp里面取经。在桌面你长按一个App的图标，它的右下角会显示一个缩放的角标，你通过点击或拖动它可以改变图标的大小和形状，通过大小长短不一的图标组合，你可以布置出类Metro风格的桌面。这一点，确确实实在视觉上给我带来了不少乐趣。&lt;/p&gt;

&lt;p&gt;总的来说，和笔者常用的MIUI比起来，origin os的风格更年轻活泼，许多功能也更人性化和易用。但是我也意识到这个年轻的系统还有许多可以做得更好的地方。比如不少第三方的App的图标还不能适配到这个系统的设计语言。并且，希望会有更多像原子随身听一样简洁好用的原子组件。据说，小窗功能也是有待提高的。&lt;/p&gt;

&lt;h2 id=&quot;iqoo-neo5-se-还可以更好&quot;&gt;iQoo Neo5 SE 还可以更好&lt;/h2&gt;
&lt;p&gt;比如价格再便宜点？但是在卷字当头的手机市场,在保证这个价位该有的质量的同时,是否还有压缩成本的空间?&lt;/p&gt;</content><author><name></name></author><summary type="html">iQoo在2021年第一季度发布了Neo系列的旗舰手机iQoo Neo5，从销量和用户的评价来看，这都是一款战斗力很高的机型。而它的派生机型，第四季度最后一个月发布的iQoo Neo 5 SE（special edition），在我看来则是Neo5家族中漂亮的收官之作。</summary></entry><entry><title type="html">星尘</title><link href="kikyoulzg.github.io/2022/01/02/%E6%98%9F%E5%B0%98.html" rel="alternate" type="text/html" title="星尘" /><published>2022-01-02T07:29:29+08:00</published><updated>2022-01-02T07:29:29+08:00</updated><id>kikyoulzg.github.io/2022/01/02/%E6%98%9F%E5%B0%98</id><content type="html" xml:base="kikyoulzg.github.io/2022/01/02/%E6%98%9F%E5%B0%98.html">&lt;p&gt;星辰乃闪烁着的尘埃。&lt;/p&gt;

&lt;p&gt;寒冷的余烬，&lt;/p&gt;

&lt;p&gt;再次被点燃。&lt;/p&gt;</content><author><name></name></author><summary type="html">星辰乃闪烁着的尘埃。</summary></entry><entry><title type="html">当萌新遇上arch linux #2021.08.07</title><link href="kikyoulzg.github.io/2021/08/07/%E5%BD%93%E8%90%8C%E6%96%B0%E9%81%87%E4%B8%8Aarch-linux-2021.08.07.html" rel="alternate" type="text/html" title="当萌新遇上arch linux #2021.08.07" /><published>2021-08-07T14:45:15+08:00</published><updated>2021-08-07T14:45:15+08:00</updated><id>kikyoulzg.github.io/2021/08/07/%E5%BD%93%E8%90%8C%E6%96%B0%E9%81%87%E4%B8%8Aarch%20linux#2021.08.07</id><content type="html" xml:base="kikyoulzg.github.io/2021/08/07/%E5%BD%93%E8%90%8C%E6%96%B0%E9%81%87%E4%B8%8Aarch-linux-2021.08.07.html">&lt;p&gt;&lt;img src=&quot;/downloads/arch2021.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;
&lt;p&gt;曾几何时，我的电脑里躺着一个叫Arch linux的操作系统，可是有一天我让他滚（滚动更新），却万万没想到他就这样离开了我（把系统的依赖整坏了）。我只好重新找回我的老相好deepin。&lt;/p&gt;

&lt;p&gt;时间如白驹过隙，前不久为了体验一把cutefishDE,我重新安装了arch,安装过程看回了我过往写的帖子，发现有些地方已经不一样了，赶紧mark一下。&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;Q：为啥要用arch呢，听说连安装都很麻烦呢
A：因为吃豆人 ;）&lt;/p&gt;

&lt;h2 id=&quot;萌新也能用arch&quot;&gt;萌新也能用arch&lt;/h2&gt;
&lt;h3 id=&quot;萌新脑海里的安装&quot;&gt;萌新脑海里的安装&lt;/h3&gt;
&lt;p&gt;下载系统镜像〉制作启动盘〉安装（点点点，全部默认）〉一个带有图形界面的系统呈现在眼前
##萌新安装arch的实况
前两个一样的〉安装（完了，没有图形界面，不能点点点了，咋整啊）
##arch的基本系统安装
确保系统已启用网络接口:
&lt;code class=&quot;highlighter-rouge&quot;&gt;ip link&lt;/code&gt;
连接有限网络或者使用&lt;code class=&quot;highlighter-rouge&quot;&gt;iwctl&lt;/code&gt;连接wifi&lt;/p&gt;

&lt;p&gt;更新系统时间:
&lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl set-ntp true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;划分分区:
&lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk  /dev/sda1&lt;/code&gt;挂/目录
&lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk  /dev/sda2&lt;/code&gt;挂到efi目录，所以这里在fdisk里要设置分区类型为efi system&lt;/p&gt;

&lt;p&gt;创建文件系统:
&lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.ext4  /dev/sda1&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.fat -F32 /dev/sda2&lt;/code&gt;efi分区要格式化为fat32的格式&lt;/p&gt;

&lt;p&gt;挂载:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount /dev/sda1 /mnt  
mkdir /mnt/efi 
mount /dev/sda2  /mnt/efi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里先后顺序要注意&lt;/p&gt;

&lt;p&gt;修改软件源:
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim  /etc/pacman.d/mirrorlist&lt;/code&gt; 
把快的源去掉#放到文件顶部&lt;/p&gt;

&lt;p&gt;安装基本包:
&lt;code class=&quot;highlighter-rouge&quot;&gt;pacstrap /mnt base base-devel linux linux-firmware&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;配置fstab:
&lt;code class=&quot;highlighter-rouge&quot;&gt;genfstab -L /mnt &amp;gt;&amp;gt; /mnt/etc/fstab &lt;/code&gt;
 chroot:
&lt;code class=&quot;highlighter-rouge&quot;&gt;arch-chroot /mnt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置时区:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;提前安装的软件:
&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S vim dialog wpa_supplicant ntfs-3g networkmanager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;本地化:
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/locale.gen&lt;/code&gt;
在文件中找到zh_CN.UTF-8 UTF-8 zh_HK.UTF-8 UTF-8 zh_TW.UTF-8 UTF-8 en_US.UTF-8 UTF-8这四行，去掉行首的#号，保存并退出。&lt;/p&gt;

&lt;p&gt;执行
&lt;code class=&quot;highlighter-rouge&quot;&gt;locale-gen&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/locale.conf&lt;/code&gt;
在文件的第一行加入以下内容：LANG=en_US.UTF-8`&lt;/p&gt;

&lt;p&gt;设置主机名:
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/hostname&lt;/code&gt;
在文件的第一行输入你自己设定的一个myhostname,保存并退出。
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/hosts&lt;/code&gt;
加入以下代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1	localhost.localdomain	localhost
::1		localhost.localdomain	localhost
127.0.1.1	myhostname.localdomain	myhostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置Root密码:
&lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装Intel-ucode（非IntelCPU可以跳过此步骤）:
&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S intel-ucode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装Bootloader:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pacman -S os-prober 
 pacman -S grub efibootmgr 
 grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=grub 
 grub-mkconfig -o /boot/grub/grub.cfg 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果发现grub.cfg没有arch的启动项，执行以下命令并再次生成grub.cfg
&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S linux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重启:
&lt;code class=&quot;highlighter-rouge&quot;&gt;exit,reboot&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你拥有了一个字符界面的基本系统
##arch安装桌面环境（以CutefishDE为例）
记得先连接网络。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start wpa_supplicant.service
nmcli dev wifi list  #查看wifi列表
nmcli device wifi connect “your wifi name” password “your wifi password”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;创建交换空间：
&lt;code class=&quot;highlighter-rouge&quot;&gt;fallocate -l 512M /swapfile &lt;/code&gt;
请将512M换成需要的大小，只能以M或G为单位
修改权限
&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 /swapfile&lt;/code&gt;
设置交换文件，执行
&lt;code class=&quot;highlighter-rouge&quot;&gt;mkswap /swapfile&lt;/code&gt;
启用交换文件，执行
&lt;code class=&quot;highlighter-rouge&quot;&gt;swapon /swapfile&lt;/code&gt;
最后我们需要编辑/etc/fstab为交换文件设置一个入口，使用vim打开文件：
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/fstab&lt;/code&gt;
注意编辑fstab文件的时候要格外注意不要修改之前的内容，直接在最后新起一行加入以下内容：
&lt;code class=&quot;highlighter-rouge&quot;&gt;/swapfile none swap defaults 0 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;新建用户：
&lt;code class=&quot;highlighter-rouge&quot;&gt;useradd -m-Gwheel username&lt;/code&gt;（请自行替换username为你的用户名）
&lt;code class=&quot;highlighter-rouge&quot;&gt;passwd username&lt;/code&gt;（请自行替换username为你的用户名）&lt;/p&gt;

&lt;p&gt;配置sudo：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S something&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S sudo&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;visudo&lt;/code&gt;
找到# %wheel ALL=(ALL)ALL，去掉#
重启一下。&lt;/p&gt;

&lt;p&gt;安装xorg：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S xorg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装图形环境：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S cutefish sddm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;提前配置网络：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl disable netctl&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl enable NetworkManager &lt;/code&gt;注意大小写
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S network-manager-applet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样，重启一下，就可以看到图形界面了！
然后安装字体和中文输入法就可以开始你的表演了，哇咔咔(´∀｀*)&lt;/p&gt;

&lt;p&gt;##可能会遇到的问题
1、grub-install的时候说啥找不到efi目录
2、安装完以后找不到win10的启动项了
3、系统里的中文都是方块而且字母都出现了错位
4、时间不对，差了8个小时
5、ctrl+space调不出输入法
##解决问题
1、chroot前要把efi分区挂到/mnt/efi，如果电脑里原本有win的话一般已经带有这个分区，如果没有就创建它
2、先执行以下命令过去一些有用的信息并放到文件里以备使用。
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo grub-probe --target=fs_uuid /boot/EFI/EFI/Microsoft/Boot/bootmgfw.efi &amp;gt;&amp;gt; /root/fs_uuid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo grub-probe --target=hints_string /boot/EFI/EFI/Microsoft/Boot/bbootmgfw.efi &amp;gt;&amp;gt; /root/hints_string&lt;/code&gt;
然后编辑/boot/grub/grub.cfg，找到&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; BEGIN /etc/grub.d/10_linux 
...
END /etc/grub.d/10_linux 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在他们之间加上下面一段&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;menuentry &quot;Microsoft Windows 10 x86_64 UEFI-GPT&quot; {  
    insmod part_gpt  
    insmod fat  
    insmod search_fs_uuid  
    insmod chain  
    search --fs-uuid --set=root \$hints_string \$fs_uuid
    chainloader /EFI/Microsoft/Boot/bootmgfw.efi  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3、下载安装等宽中文字体
4、把时区调到上海
5、编辑.xprofile增加fcitx前端的环境变量如下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx
export GTK_IM_MODULE=fcitx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#文件归纳
 /etc/pacman.d/mirrorlist  软件源
/mnt/etc/fstab  自动挂载
/etc/localtime  时区
 /etc/locale.gen  本地化
 /etc/hostname  主机名
/etc/hosts  主机名
 /boot/grub/grub.cfg  系统引导
 /etc/lightdm/lightdm.conf  登录管理器
.xprofile  环境变量
#相关链接
&lt;a href=&quot;https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;ArchWiki的安装指南&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/title/General_recommendations_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;安装后的工作&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by the way,直接去看wiki不香吗（掩面）&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">人生苦短，为什么还要学写代码</title><link href="kikyoulzg.github.io/2021/05/29/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AD%A6%E5%86%99%E4%BB%A3%E7%A0%81.html" rel="alternate" type="text/html" title="人生苦短，为什么还要学写代码" /><published>2021-05-29T22:04:50+08:00</published><updated>2021-05-29T22:04:50+08:00</updated><id>kikyoulzg.github.io/2021/05/29/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD,%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AD%A6%E5%86%99%E4%BB%A3%E7%A0%81</id><content type="html" xml:base="kikyoulzg.github.io/2021/05/29/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AD%A6%E5%86%99%E4%BB%A3%E7%A0%81.html">&lt;p&gt;这几年，断断续续看了不少编程的书籍和博客，自己也捣鼓了从&lt;strong&gt;汇编&lt;/strong&gt;到&lt;strong&gt;C&lt;/strong&gt;再到&lt;strong&gt;C++&lt;/strong&gt;和&lt;strong&gt;python3&lt;/strong&gt;这几个主流的编程语言，虽然基本上每种语言都只学了基本的用法，但也确实花了不少的时间（也许没有发呆的时间多啦），不过如果给我再选一次，我还是会选择把时间放在这上面，毕竟，你只要找个安静的地方，带上pc和自己聪明或不聪明的脑瓜子，就可以开始捣鼓出一些有用没用的工具（程序）来。说实在的，不仅方便还有点好玩。但是，我不建议你每天对着屏幕长时间写代码，当然这个也是因人而异啦，一杯茶，一根烟，代码一写就一天还能活蹦乱跳的也大有人在。&lt;/p&gt;

&lt;p&gt;现在很多小伙伴学编程的首选语言应该都是python（指python3）了，“人生苦短，我用python”这句话可谓直击许多人的灵魂，特别是像我这样的打工人。但是我现在觉得，如果人生真的苦短，请不要把时间花在写代码上，除非你是真的喜欢写代码或者真的认为自己真的有必要学它。好，假设你真的要花时间在这上面的话，我推荐你先做一件事，拿出自己的pc，如果你的机器上面只有一个windows的话，请安装一个叫deepin的操作系统，这里就不过多的介绍这个系统了，反正就是多如牛毛的linux发行版中比较好用的一个，优点是美观、易用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/downloads/rskd0.png&quot; alt=&quot;deepin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在包括deepin在内的大部分linux发行版上python都是已经安装好的，只要再下载一个vscode之类的编辑器，就可以开始愉快地敲代码了。&lt;/p&gt;

&lt;p&gt;有了好的编程环境，就可以开始愉快地学python了。学编程，光看书或者听课肯定是学不会的，一定要多敲敲代码，自己写点有用没用的东西出来，哪怕写出来的代码一堆bug也无所谓，编程本就是一个不停写bug和修bug的过程：）&lt;/p&gt;

&lt;p&gt;我在学python之前，还学过一点汇编，虽然现在基本不会用到汇编了，但是我还是比较感激学习过程中学到的一个概念的，那就是sandbox（沙盒）。简单的说，就是你学编程的时候，可以创建一个叫sandbox.py的文件（其实文件名叫什么都不重要），当学到一些编程的实例或者想试试某种想法的时候，就可以在这个上面写，如果觉得这段代码很有意义，日后说不定能用上的，那就另存为便可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/downloads/rskd1.png&quot; alt=&quot;sandbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;鲁迅说过，“你不试试怎么知道自己真的不行呢？”，这里就给大家推荐一个挺适合新手的在线编程平台&lt;a href=&quot;https://python123.io/index&quot;&gt;python123&lt;/a&gt;，这个平台不仅提供了在线编程，而且也和中国大学Mooc合作，推出了公开课的配套练习和测试，之前看了看Mooc上的课程，感觉嵩天老师的&lt;a href=&quot;https://www.icourse163.org/course/BIT-268001&quot;&gt;Python语言程序设计&lt;/a&gt;还是挺适合你我这样的新手村选手的（不过能一倍速看完的人真的太强了，反正我是不行）。听课的时候感觉都懂，但是等自己去python123平台上做配套的联系和测试的时候，也许你会发现自己有点无从下手，没关系，由于练习是不限时的，你大可慢慢琢磨，如果这个知识点想不起来了，也可以回去看看课件，或者直接上网搜，比方说可以去下面两个网站找找，&lt;a href=&quot;https://www.runoob.com/python3/python3-tutorial.html&quot;&gt;菜鸟教程&lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/zh-cn/3/tutorial/index.html&quot;&gt;python官方教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我要说的，基本就是这些了。人生苦短，不一定是要学python的，说python简单，其实是相对c++等语言来说相对简单，但是涉及到高级的算法，复杂的需求的时候，终究还是要秃的，不过应该能比Bjarne Stroustrup好些。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/downloads/rskd2.jpeg&quot; alt=&quot;Bjarne Stroustrup的凝视&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">这几年，断断续续看了不少编程的书籍和博客，自己也捣鼓了从汇编到C再到C++和python3这几个主流的编程语言，虽然基本上每种语言都只学了基本的用法，但也确实花了不少的时间（也许没有发呆的时间多啦），不过如果给我再选一次，我还是会选择把时间放在这上面，毕竟，你只要找个安静的地方，带上pc和自己聪明或不聪明的脑瓜子，就可以开始捣鼓出一些有用没用的工具（程序）来。说实在的，不仅方便还有点好玩。但是，我不建议你每天对着屏幕长时间写代码，当然这个也是因人而异啦，一杯茶，一根烟，代码一写就一天还能活蹦乱跳的也大有人在。</summary></entry><entry><title type="html">煤的记忆</title><link href="kikyoulzg.github.io/2020/10/12/%E7%85%A4%E7%9A%84%E8%AE%B0%E5%BF%86.html" rel="alternate" type="text/html" title="煤的记忆" /><published>2020-10-12T00:20:22+08:00</published><updated>2020-10-12T00:20:22+08:00</updated><id>kikyoulzg.github.io/2020/10/12/%E7%85%A4%E7%9A%84%E8%AE%B0%E5%BF%86</id><content type="html" xml:base="kikyoulzg.github.io/2020/10/12/%E7%85%A4%E7%9A%84%E8%AE%B0%E5%BF%86.html">&lt;p&gt;煤，现在城里人基本不会再用到了，大多数人用的是天然气或者液化石油气，蜂窝煤偶尔能看到，但是少。似乎煤炭已经从人们的视野里渐渐远去，实则不然，我们依旧间接地使用着它，火力发电站需要用煤，生产化工原料和炼钢等工业上往往也需要用到。而据我所知，对这种重要的自然资源的利用，我们国家是先于西方的，西方人在看到我们的先辈在使用煤炭后惊呼这是一种可以像柴薪一样燃烧的石头。&lt;/p&gt;

&lt;p&gt;恰逢国庆，打算去趟北方走走，翻了翻手上的《中国自助游》，便决定去山西的太原看看（本来打算4号出发，但是太久没有出行，竟然没把值机的时间算上，结果没赶上航班，只好改签到5号）。这次的行程颇为奔波，虽然主要是在太原但是期间去了两趟石家庄换乘火车，最后是从天津回的广州，至于为啥，主要是……为了省钱。（下次去旅行我会选择中转少的路线了）&lt;/p&gt;

&lt;p&gt;到了太原以后我直奔太原地头蛇（家住太原的同学）推荐的中国煤炭博物馆，这是我继饺子博物馆和啤酒博物馆以后见到最神奇的博物馆。和以往的博物馆体验不同，这里你必须请讲解员，而且观看博物馆是单程的，最后讲解员会带你去到一个模拟矿井，在那里你能当一回矿工;）老实说，由于前些年不时听到矿井塌陷然后黑心煤老板跑路的新闻，感觉下到矿井后心里有点毛毛的，特别是当你坐上矿车前往矿井里头时。
&lt;img src=&quot;&quot; alt=&quot;煤炭博物馆&quot; /&gt;&lt;/p&gt;

&lt;p&gt;煤炭是不可再生的化石能源，你可以把它看作是数百万年到达地球的太阳能，这些太阳能是当时的植物固定下来的。死去的植物在河床中腐化堆积，日积月累便成了所谓的泥炭。由于地质运动，河床下降，泥炭就在高温和高压下逐渐变成我们称为煤炭的东西了。&lt;/p&gt;

&lt;p&gt;我不禁感叹，人类的文明是建立在那千百万年前的生物遗留的能量之上的，是遥远的时空中，这颗星球上的生灵给予我们慷慨的馈赠。也许总有一天，我们也会成为另一种生物，另一个伟大的文明的基石。&lt;/p&gt;

&lt;p&gt;而在太原这片土地上，你可以看到辉煌的华夏文明的影子。周朝最为强盛的诸侯国之一——晋国便是诞生在此。西周时周成王的弟弟叔虞被分封到唐地，后其子迁都到晋水之傍，改国号为晋。今天太原的晋祠就是为纪念唐叔虞而建的。可能是因为之前家里的老人在看重耳传奇时我也不是看几眼的缘故，对晋国的历史便有点兴趣，所以到太原的次日就一大早去了晋祠。晋祠的外面建了一个晋祠公园，景色很不错，看到不少游客来这里并不去晋祠而是在公园里找快空地扎个帐篷然后在湖边钓鱼。去晋祠里头给我最大的感觉就是，如果有一个博学的古代文献学者同游该有多好，里面许多碑文古物，像我这种古文极差的人实在是只能看个年代而已。倒是里面有不少上千年的槐柏可以开开眼界。噢，对了，一些晋国的珍贵文物（晋侯鸟尊、侯马盟书等）倒是不在这里的，而是放置在山西博物馆里，这次由于时间不够所以并没有去，有点可惜。
&lt;img src=&quot;&quot; alt=&quot;晋祠一角&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7号的整个上午都是在平遥县的平遥古城中闲逛，对于这座古城，用一句话概括就是“活着的古物”，和北京的故宫不同，虽然这座古城有着历史久远的建筑群，但里面是确确实实住着人的，古城里的人在这里生活，做生意，人来人往，熙熙攘攘。在古巷里买几块小米饼，绕着古城墙边走边吃也是种休闲的享受。如果你去到平遥古城你duck不必到景区外面吃，应为古城里吃个饭并不贵，而且感觉比外头干净。还有，从太原去平遥墙裂推荐坐高铁去。
&lt;img src=&quot;&quot; alt=&quot;平遥古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;告别煤都——太原后，我来到天津，时间不多，本想着去意大利风情街找个奶茶店舒舒服服地坐一上午，然后去机场。不过打开地图瞅了瞅，还是去了那个天津的地标——天津之眼。没去坐摩天轮，不过拍了不少照片（对摄影其实一窍不通）。
&lt;img src=&quot;&quot; alt=&quot;天津之眼&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">煤，现在城里人基本不会再用到了，大多数人用的是天然气或者液化石油气，蜂窝煤偶尔能看到，但是少。似乎煤炭已经从人们的视野里渐渐远去，实则不然，我们依旧间接地使用着它，火力发电站需要用煤，生产化工原料和炼钢等工业上往往也需要用到。而据我所知，对这种重要的自然资源的利用，我们国家是先于西方的，西方人在看到我们的先辈在使用煤炭后惊呼这是一种可以像柴薪一样燃烧的石头。</summary></entry><entry><title type="html">广告收藏夹</title><link href="kikyoulzg.github.io/2020/08/16/%E5%B9%BF%E5%91%8A%E6%94%B6%E8%97%8F%E5%A4%B9.html" rel="alternate" type="text/html" title="广告收藏夹" /><published>2020-08-16T22:54:43+08:00</published><updated>2020-08-16T22:54:43+08:00</updated><id>kikyoulzg.github.io/2020/08/16/%E5%B9%BF%E5%91%8A%E6%94%B6%E8%97%8F%E5%A4%B9</id><content type="html" xml:base="kikyoulzg.github.io/2020/08/16/%E5%B9%BF%E5%91%8A%E6%94%B6%E8%97%8F%E5%A4%B9.html">&lt;p&gt;从现在开始，我会把自己觉得不错的广告放到这里，可能是一句话，可能是海报，也可以是视频。&lt;/p&gt;

&lt;p&gt;原因是现在有些广告真是不忍直视，但是它总是出现在许多地方，比如电梯，公交车上，地铁里，太多了。虽然很烂但是又很是洗脑，比如某查查，某阿米巴等。所以我觉定要给自己的脑子洗洗澡。&lt;/p&gt;

&lt;p&gt;No.1 星群夏桑菊&lt;/p&gt;

&lt;p&gt;一种常见的凉茶，在很多地方都有，不过我家这边喝的比较多的是星群的。小时候看电视经常看到它的广告，这么多年了，听到那熟悉的旋律，总能想起小时候上火了就会马上喝一杯这甜甜的凉茶，然后继续活蹦乱跳（好吧，其实现在也不时会喝，不过现在会喝那种无糖的）。下面的是16版，悄悄告诉你，里面其实藏着旧版的星群夏桑菊广告哦。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Fz411b7rK/?spm_id_from=333.788.videocard.1&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No.2 百岁山矿泉水&lt;/p&gt;

&lt;p&gt;水中贵族了解一下；）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV13t411S77V&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No.3 步步高音乐手机&lt;/p&gt;

&lt;p&gt;小时候看电视，经常看到的广告之一，旋律很好听，宋乔慧也蛮好看。那时还是功能机的时代，步步高除了它的点读机，就属这个音乐手机给我的印象最为深刻了。到了智能手机时代，步步高旗下的vivo似乎也是以优秀的音质为买点的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Ms411U7od&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">从现在开始，我会把自己觉得不错的广告放到这里，可能是一句话，可能是海报，也可以是视频。</summary></entry><entry><title type="html">格雷厄姆与他的《黑客与画家》</title><link href="kikyoulzg.github.io/2020/06/20/%E6%A0%BC%E9%9B%B7%E5%8E%84%E5%A7%86%E4%B8%8E%E4%BB%96%E7%9A%84-%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6.html" rel="alternate" type="text/html" title="格雷厄姆与他的《黑客与画家》" /><published>2020-06-20T23:25:49+08:00</published><updated>2020-06-20T23:25:49+08:00</updated><id>kikyoulzg.github.io/2020/06/20/%E6%A0%BC%E9%9B%B7%E5%8E%84%E5%A7%86%E4%B8%8E%E4%BB%96%E7%9A%84%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B</id><content type="html" xml:base="kikyoulzg.github.io/2020/06/20/%E6%A0%BC%E9%9B%B7%E5%8E%84%E5%A7%86%E4%B8%8E%E4%BB%96%E7%9A%84-%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6.html">&lt;p&gt;&lt;img src=&quot;/downloads/hkhj.jpg&quot; alt=&quot;&quot; /&gt;
其实在我拿到这本书的时候，手机上的电子版已经看了大半，因为我想看看这本书到底值不值得入手实体书，毕竟49块钱差不多是我一天的实习补贴了。&lt;/p&gt;

&lt;p&gt;这本书是阮一峰翻译的所以质量应该还算挺不错，特别是第13章涉及lisp语言的部分他请了田春冰河校译这一点就让人觉得很靠谱。毕竟后者也是《on lisp》的译者。&lt;/p&gt;

&lt;p&gt;《黑客与画家》，这个书名本身就让人觉得有意思，就像雷蒙德的《大教堂与集市》一样，如果不看看内容，你可能猜不透它到底说的是啥。&lt;/p&gt;

&lt;p&gt;它的作者格雷厄姆本来是学哲学的，但是发现哲学太复杂以后在博士阶段转战人工智能。后来创业，开发了viaweb，这个软件后来被雅虎收购了。他创业的初衷其实很简单，那就是赚钱。&lt;/p&gt;

&lt;p&gt;事实上，他毕业以后曾花了很长一段时间学习绘画，并且也曾打算靠此谋生，但结果就是只能挤在窄小的公寓里过着紧巴巴的生活。这个厉害的黑客曾经也是个画家，并且他在书中还表达了一个观点：编程其实是一门手艺，和绘画并没有什么不同。而程序员也是目前最大的工匠群体。&lt;/p&gt;

&lt;p&gt;他的创业公司被雅虎收购以后，他也去了雅虎，但是由于和大公司的氛围格格不入，很快也就辞职了。辞职以后的他用现在的话来说就是有钱有闲，于是他在自己的博客上发表了大量和他创业的经验有关的文章，并广受网友好评。后来把那些文章集合起来，便有了这本书（当然经过了很多增减和排版），所以这本书可说是他的文集，真的不得不佩服作者和o’reilly的编辑们。&lt;/p&gt;

&lt;p&gt;黑客，互联网软件，创业，编程语言。大体上，本书就是关于这些的一个文集。但是如果割裂开来看，其实就不好看了，你要看到的应该是这些东西背后的作者本人和他的经验，这是一个整体。&lt;/p&gt;

&lt;p&gt;这本书读起来其实挺有趣的，有时会觉得作者的一些观点简直太对头了，而有时则不敢苟同，当然大部分时候我都只能喊着666。&lt;/p&gt;

&lt;p&gt;作者说在美国，许多人把孩子扔到校园里，是因为他们往往忙于工作，没时间照顾孩子，而那些被关在校园里的孩子和被关在笼子里的宠物并没有太多区别。如果放在中国，这样说其实挺过分的，毕竟还有许多小孩上不起学的。有多少父母为孩子上个学而伤透脑筋的。不过，对于大部分能上学的孩子，作者说的其实没错，这点上咱和美国差不多。&lt;/p&gt;

&lt;p&gt;作者又说，小孩往往离他们父母的工作都很远，他们只知道父母去工作了然后赚了钱，却对父母的工作本身一无所知。这一点确实是深有同感，我即将进入父母过去所在的行业，但是这个行业到底怎样，我到底要干啥，我适合干这行吗，这些我都不知道。&lt;/p&gt;

&lt;p&gt;现在我依然不理解父母的工作，也许以后会理解，也许不会。但是无论如何，我知道他们是在创造财富，这个财富指的不是钱，而是别人需要的东西，这个东西可以是一个物品也可以是一项服务。&lt;/p&gt;

&lt;p&gt;作者认为创业想要成功，必须创造出别人需要的东西，要换位思考，客户到底需要怎样的东西。&lt;/p&gt;

&lt;p&gt;“在现在，贫富分化，也就是说收入差距拉大，实际上是一种健康的信号。”初次看到书上的这个观点，我确实有点大跌眼镜，贫富差距增大怎么可能是件好事？作者是这样解释的，他认为技术的发展加大了贫富差距，但是技术在加大收入差距的同时，缩小了大部分其他的差距。就好比现在资本家和普通白领都能开得起车（虽然档次可能不同）。&lt;/p&gt;

&lt;p&gt;有趣的是，他后面说道，如果让他选择是生活在一个整体上非常富裕但是他个人相对贫穷的社会，还是生活在一个他个人相对非常富裕但是整体上非常贫穷的社会。他会选择第一个，但是如果他有小孩的话就得另说了（可见他写这本书的时候还没小孩）。&lt;/p&gt;

&lt;p&gt;作者似乎挺鄙视windows的，他使用的是freeBSD，一个类UNIX操作系统。这点倒是和咱差不多233。&lt;/p&gt;

&lt;p&gt;还有就是他花了不少笔墨去写互联网软件，也就是你的程序是运行在服务器上的，用户通过浏览器来使用它。从今天的角度来看，互联网软件确实占据了非常大的市场份额，你手机里的淘宝，微信其实都算互联网软件。但是我个人认为桌面软件是不会被完全淘汰的，除非互联网能绝对安全可靠，并且谁都能用上。再说，如果一个计算器或者日历，似乎也没有必要做成互联网软件的。在我看来一个靠谱的软件，应该在不用联网的情况下也能保证核心功能可用。&lt;/p&gt;

&lt;p&gt;格雷厄姆看起来应该是lisp语言的忠实粉丝无误。他可以说是不留余力地安利了一波lisp，不知道有多少人是因为这本书入了lisp的坑呢？&lt;/p&gt;

&lt;p&gt;他认为目前（指他写这本书的时候）最流行的编程语言里面最先进的那些（比如python）也仅仅达到1958年的lisp的水平。&lt;/p&gt;

&lt;p&gt;我是没用过lisp的，但是姑且相信作者所言是真的（也可以说相信他的品味），毕竟他开发viaweb的时候就大量使用了这种语言。&lt;/p&gt;

&lt;p&gt;我总结一下他说的关于lisp的特点：小众，先进，简洁，可编程性高，适合开发一次性程序，适合再设计，有很强大的宏。&lt;/p&gt;

&lt;p&gt;但是个人认为，lisp在函数库上和主流的差距是很大的。其次不知道目前有没有lisp的性能分析器，作者认为对于效率来说，有一个好的性能分析器比是否是静态类型或者是否是编译型语言要来的重要。最后，lisp能受得住时间的考验吗？我记得王垠有一篇文章叫《lisp已死，lisp永存》，有兴趣可以看看。&lt;/p&gt;</content><author><name></name></author><summary type="html">其实在我拿到这本书的时候，手机上的电子版已经看了大半，因为我想看看这本书到底值不值得入手实体书，毕竟49块钱差不多是我一天的实习补贴了。</summary></entry><entry><title type="html">人才市场分析（大雾）</title><link href="kikyoulzg.github.io/2020/04/19/%E4%BA%BA%E6%89%8D%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90-%E5%A4%A7%E9%9B%BE).html" rel="alternate" type="text/html" title="人才市场分析（大雾）" /><published>2020-04-19T12:01:39+08:00</published><updated>2020-04-19T12:01:39+08:00</updated><id>kikyoulzg.github.io/2020/04/19/%E4%BA%BA%E6%89%8D%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90(%E5%A4%A7%E9%9B%BE)</id><content type="html" xml:base="kikyoulzg.github.io/2020/04/19/%E4%BA%BA%E6%89%8D%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90-%E5%A4%A7%E9%9B%BE).html">&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于求职这事，如果不是过来人可能很难感同身受，而且不同的人的体验可能也差别很大，但是有一点是可以明确的，无论是应聘者还是招聘者，都是在“人才”这个市场中进行着博弈。&lt;/p&gt;

&lt;p&gt;在这个市场里面最昂贵的是学术，其次是技术，然后才是学历和证书等。这也是符合物以稀为贵的准则的。不过学术这东西，我个人觉得对于大部分的参与者来说都是没有参考意义的，打个比方就是相当于场内交易。再说，就算是千里马也未必能遇到伯乐吧。至于技术，就比较直观，毕竟企业希望你过去是能创造价值的，而学历和证书无非是拍门砖，你到底有没有料很难光靠这个看出来，但是如果你是能证明自己有这个技术的，那就不一样了，这落到简历上就是你的经验和作品。&lt;/p&gt;

&lt;p&gt;不过如果你和我一样是应届生，那么我猜大部分人都是没有什么经验也没有拿的出手的作品，更别提学术了。所以只好看学历还有证书。&lt;/p&gt;

&lt;p&gt;在这个市场里，学历的价值按照学力来看，研究生 &amp;gt; 本科 &amp;gt; 专科 &amp;gt; 高中，这也是人才市场细分的开始。&lt;/p&gt;

&lt;p&gt;然后再就是专业，其实这个远比我当初(填报志愿的时候)所想的重要，除非你有技术(拿的出手那种)，否则跨领域是很难的，比如一个学经济学的（fintech除外)揣着自己的gayhub（一颗星都没有的那种）去找IT企业，不出意外会这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在招聘软件里你如果看到，“感谢”，“人才库”等词汇，就是凉了～ 不过让人最绝望的大概就是“被查看”和“不合适”的时间是一样的……估计是看了下照片或者专业就pass了 :(&lt;/p&gt;

&lt;p&gt;如果大家都是软件工程的本科生，大连东软软件学院的和大连理工软件学院的，他们去微软面试就会不一样（我猜的），这就是学校的作用，知名度和在行业内的声誉。&lt;/p&gt;

&lt;p&gt;对于学历，专业和学校的知名度都接近的人，hr会怎么选择呢？其实这里面的情况很多，但是比较简单的办法就是看证书。比如你如果要去应聘会计，那么你最低的配置就是四级+初会，然后如果你有CPA的话优势应该会大很多。&lt;/p&gt;

&lt;p&gt;那作为“人才”这个市场的卖方，我们当然不能只想着让买方开心，哪怕他们才是上帝，对不对？&lt;/p&gt;

&lt;p&gt;试想，在商品市场中，企业是怎么思考的？我们从中又能得到怎样的启发？&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">银行实习生心得</title><link href="kikyoulzg.github.io/2020/03/28/%E9%93%B6%E8%A1%8C%E5%AE%9E%E4%B9%A0%E7%94%9F%E5%BF%83%E5%BE%97.html" rel="alternate" type="text/html" title="银行实习生心得" /><published>2020-03-28T10:12:17+08:00</published><updated>2020-03-28T10:12:17+08:00</updated><id>kikyoulzg.github.io/2020/03/28/%E9%93%B6%E8%A1%8C%E5%AE%9E%E4%B9%A0%E7%94%9F%E5%BF%83%E5%BE%97</id><content type="html" xml:base="kikyoulzg.github.io/2020/03/28/%E9%93%B6%E8%A1%8C%E5%AE%9E%E4%B9%A0%E7%94%9F%E5%BF%83%E5%BE%97.html">&lt;p&gt;其实标题改成整理档案心得也是可以的，因为我的职责就是给风管的老师们整理档案。&lt;/p&gt;

&lt;p&gt;整理档案，听上去挺无脑的，大抵和去工地搬砖差不多吧。但是我知道如果只是把整理档案这事当作机械的劳动那么我就啥也学不到。所以我要思考，在这枯燥的工作中能学到什么。&lt;/p&gt;

&lt;p&gt;一个好的开始是成功的一半，这句箴言确实没毛病。来华兴实习第一天把乱糟糟的出账资料按照客户名区分开来并贴好标签，这是我日后顺利展开工作的基础，如果我没有认真对待的话，后面就会自吃苦头。&lt;/p&gt;

&lt;p&gt;把资料分好类以后，就是整理了，这些资料是银行对公或者对私的授信资料，简单来说就是银行放贷给你，你要给银行提供的资料包括各种合同，说明书等，方便你还不了钱的时候银行好收拾你。银行贷款的业务品种挺多的，比如银行承兑汇票，信用证，流动资金贷款，福费廷等，但是无论哪种业务放款审查表，授信批复，额度使用表是必须有的。&lt;/p&gt;

&lt;p&gt;感觉整理资料的过程是一个与同事交流的过程，不断从同事的反馈中得到改进，比如资料要分成档案，专夹和备份，退回给客户经理的材料三部分，档案的材料顺序按照清单来，一些和利率有关的资料不要放档案里，提前支取申请书单独放，每个单笔单独装订等。。。提问很重要，和人沟通很重要。&lt;/p&gt;

&lt;p&gt;在华宝信托实习的时候每个星期都要往银行跑，办业务，自己除了提供企业的材料和偶尔签个名以外就是看着银行的老师在那忙活，现在自己在银行实习了，嗯……其实感觉银行还是比较忙的，每天早上8点半去到大家都在办公室了，每天下午5点下班的时候大家却还在加班，由于家离得比较远所以我一般都是准时下班开溜的，哈哈哈。&lt;/p&gt;

&lt;p&gt;春节以后，我在的那个部门是2月10号就开始上班了，不过我请了两个星期假，到了龙抬头那天也就是2月24才去，一方面是为了自己，另一方面其实也是为了同事们的安全，嗯，是这样没错。不过每天乘地铁上下班看到这么多人在一个密闭的空间里其实还是很慌的，所幸的是佛山分行食堂的饭菜给我带来了极大的安慰，怀疑厨师是顺德人，但是可能在东北呆久了习惯了东北食堂阿姨那豪爽的饭量，感觉这边阿姨打的饭有点少。&lt;/p&gt;

&lt;p&gt;最后不得不感叹一下，2020年的就业真是太难了T-T&lt;/p&gt;

&lt;p&gt;其实呢，还是自己太菜。&lt;/p&gt;</content><author><name></name></author><summary type="html">其实标题改成整理档案心得也是可以的，因为我的职责就是给风管的老师们整理档案。</summary></entry></feed>